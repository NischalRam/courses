[
  {
    "summary": "This book is a technical guide aimed at computing professionals who want to understand the potential of knowledge graphs and how to implement them. It covers topics such as organizing principles for building knowledge graphs, graph databases, loading knowledge graph data, integrating knowledge graphs with information systems, enriching knowledge graphs with data science, graph-native machine learning, mapping data with metadata knowledge graphs, identity knowledge graphs, pattern detection knowledge graphs, dependency knowledge graphs, semantic search and similarity, and talking to knowledge graphs. The book provides implementation details, tools, patterns, and practices for building knowledge graphs with confidence.",
    "points": [
      "Graph databases and graph data science have reached a significant level of adoption.",
      "Knowledge graphs are a purposeful arrangement of data that enables insight at scale across functional silos.",
      "The book covers topics such as organizing principles for building knowledge graphs, graph databases, loading knowledge graph data, integrating knowledge graphs with information systems, enriching knowledge graphs with data science, graph-native machine learning, mapping data with metadata knowledge graphs, identity knowledge graphs, pattern detection knowledge graphs, dependency knowledge graphs, semantic search and similarity, and talking to knowledge graphs.",
      "The book is aimed at computing professionals who want to understand the potential of knowledge graphs and how to implement them.",
      "Readers will benefit from having some familiarity with database concepts and programming experience."
    ]
  },
  {
    "summary": "This text introduces the concept of knowledge graphs and their importance in understanding and extracting value from data. Knowledge graphs provide contextualized understanding of data by representing data items as connected nodes in a graph. The text explains the basics of graphs and the property graph model, which is the foundation for knowledge graphs. It also discusses the motivation for using knowledge graphs, including the need for rapid insights and recommendations in a rapidly changing business environment. Knowledge graphs are defined as interlinked sets of facts that describe real-world entities and their interrelations, with an organizing principle that adds context and supports knowledge discovery. The text concludes by mentioning that knowledge graphs can be built on different data storage architectures and provides a preview of the next chapter on organizing principles.",
    "points": [
      "Graphs have become a popular technology for understanding and extracting value from data",
      "Knowledge graphs provide contextualized understanding of data by representing it as connected nodes in a graph",
      "The property graph model is the foundation for knowledge graphs and consists of nodes, relationships, labels, and properties",
      "The motivation for knowledge graphs includes the need for rapid insights and recommendations in a rapidly changing business environment",
      "Knowledge graphs are interlinked sets of facts with an organizing principle that adds context and supports knowledge discovery",
      "Knowledge graphs can be built on different data storage architectures",
      "The next chapter will discuss organizing principles in knowledge graphs"
    ]
  },
  {
    "summary": "This chapter discusses the organizing principles for building knowledge graphs. It explains that a graph becomes a knowledge graph when an organizing principle is applied to help people and software understand it. The chapter introduces different organizing principles, such as plain old graphs, property graphs, taxonomies, and ontologies. It emphasizes the importance of choosing the organizing principles that best suit the problems you want to solve. The chapter also highlights the benefits of using standards for organizing principles and the trade-offs of creating your own. It concludes by mentioning the essential characteristics of a knowledge graph, including flexibility, ease of maintenance, and performance. The chapter clarifies that RDF is a model for data exchange, not a guide to storage or querying, and that the choice of data model should not be dictated by the wire format.",
    "points": [
      "Graphs become knowledge graphs with the application of an organizing principle",
      "Different organizing principles include plain old graphs, property graphs, taxonomies, and ontologies",
      "Choose the organizing principles that best suit the problems you want to solve",
      "Consider using existing standards for interoperability and knowledge reuse",
      "Creating your own organizing principle allows for fine-grained control",
      "Essential characteristics of a knowledge graph include flexibility, ease of maintenance, and performance",
      "RDF is a model for data exchange, not a guide to storage or querying"
    ]
  },
  {
    "summary": "This chapter introduces graph databases and their significance in contemporary business systems. It explains how to use a graph database and the Cypher query language to store and query knowledge graphs. The chapter also highlights the popularity of Neo4j as a graph database and provides information on tools like Neo4j Sandbox and Neo4j Aura for learning and prototyping. It emphasizes the importance of understanding Cypher and provides examples of creating data in a knowledge graph using Cypher's CREATE keyword. The chapter also covers graph local and global queries, as well as the use of functions and procedures in Cypher. It concludes with an overview of Neo4j internals, including index-free adjacency, query processing, and ACID transactions.",
    "points": [
      "Graph databases and graph processing have become significant in contemporary business systems",
      "Neo4j is the most popular graph database and is freely available",
      "Cypher is a declarative, pattern-matching query language used for knowledge graph development",
      "Creating data in a knowledge graph involves using the CREATE keyword in Cypher",
      "Graph local queries focus on specific parts of the graph, while graph global queries consider the entire graph",
      "Functions and procedures, such as those provided by the APOC library, can be used in Cypher queries",
      "Understanding Neo4j internals, including index-free adjacency, query processing, and ACID transactions, helps optimize performance and ensure data safety"
    ]
  },
  {
    "summary": "Chapter 4 of the course focuses on loading knowledge graph data. It introduces three methods of bulk loading data into a knowledge graph: using the Neo4j Data Importer, using LOAD CSV command, and using the neo4j-admin import tool. The Neo4j Data Importer is a visual tool that allows users to define the structure of a knowledge graph and map data onto that structure for bulk imports. LOAD CSV command allows importing CSV data into a live graph from various sources. The neo4j-admin import tool is a fast offline importer that can handle large datasets. The chapter provides examples and instructions for using each method. It also discusses best practices and considerations for data preparation and performance optimization.",
    "points": [
      "Chapter 4 focuses on loading knowledge graph data",
      "Three methods of bulk loading data are introduced: Neo4j Data Importer, LOAD CSV command, and neo4j-admin import tool",
      "The Neo4j Data Importer is a visual tool for defining the structure of a knowledge graph and mapping data onto it",
      "LOAD CSV command allows importing CSV data into a live graph from various sources",
      "neo4j-admin import tool is a fast offline importer for large datasets",
      "Examples and instructions are provided for each method",
      "Best practices and considerations for data preparation and performance optimization are discussed"
    ]
  },
  {
    "summary": "This chapter discusses the integration of knowledge graphs with other systems. It explores various methods such as client-side database drivers, functions and procedures, APIs, streaming middleware, and ETL tools. The chapter also introduces the concept of a data fabric, which provides a connected view of data in underlying systems and allows users to access that data transparently via the knowledge graph. The benefits of curating data with a knowledge graph supported by a data fabric are highlighted, including improved data integration and matching rates. The chapter also covers the use of specialized platforms like Dremio and Denodo for data virtualization, as well as complementary tools like GraphQL, Kafka Connect, Spark Connector, and Apache Hop for ETL. Overall, the chapter provides guidance on how to effectively integrate knowledge graphs with information systems.",
    "points": [
      "Knowledge graphs are most powerful when integrated with other systems",
      "Integration methods include client-side database drivers, functions and procedures, APIs, streaming middleware, and ETL tools",
      "Data fabrics provide a connected view of data in underlying systems and allow transparent access via the knowledge graph",
      "Curating data with a knowledge graph and data fabric improves data integration and matching rates",
      "Specialized platforms like Dremio and Denodo enable broader data fabrics with data virtualization",
      "Complementary tools like GraphQL, Kafka Connect, Spark Connector, and Apache Hop provide additional integration capabilities"
    ]
  },
  {
    "summary": "This chapter introduces graph data science and its application in gaining insights from knowledge graphs using graph algorithms. It covers the common types of graph algorithms and their insights, as well as how to execute them using Neo4j Graph Data Science. The chapter also discusses the different classes of graph algorithms, such as statistical, analytical, and machine learning algorithms, and provides examples of each. It explains how to create graph projections and execute algorithms using the Python API for Graph Data Science. The chapter concludes with a discussion on production considerations, including the use of primary and secondary servers, and how to enrich the knowledge graph with algorithm results.",
    "points": [
      "Graph data science aims to gain insight into knowledge graphs using graph algorithms",
      "There are three broad categories of graph algorithms: statistical, analytical, and machine learning",
      "Graph algorithms can be executed using Neo4j Graph Data Science and the Cypher query language",
      "Graph projections can be created and algorithms can be executed using the Python API for Graph Data Science",
      "Production considerations include the use of primary and secondary servers and enriching the knowledge graph with algorithm results"
    ]
  },
  {
    "summary": "This chapter explores the intersection of graphs and machine learning (ML) and how ML techniques can enrich knowledge graphs and create predictive models. It discusses the concept of ML, the types of programs it produces, and the benefits of using knowledge graphs in ML. The chapter also introduces two ways to integrate graphs and ML: in-graph machine learning and graph feature engineering. It explains how to use Neo4j Graph Data Science to execute algorithms using the topology and data of a knowledge graph. The chapter then delves into graph-native ML pipelines and graph feature engineering, highlighting the importance of feature engineering in extracting data from a knowledge graph. It provides a step-by-step guide on how to create and train an ML model using a knowledge graph, and how to make predictions and persist the results back into the graph. The chapter concludes by mentioning the option of using external ML tools and platforms for more advanced ML models.",
    "points": [
      "ML is about deriving programs from data, and knowledge graphs are excellent data sources.",
      "Graphs can be integrated with ML through in-graph machine learning and graph feature engineering.",
      "Neo4j Graph Data Science allows the execution of algorithms using the topology and data of a knowledge graph.",
      "Graph-native ML pipelines involve creating and training an ML model using a knowledge graph.",
      "Graph feature engineering involves extracting data from a knowledge graph to enhance ML models.",
      "The process of creating and training an ML model using a knowledge graph is demonstrated step-by-step.",
      "The results of the ML model can be persisted back into the knowledge graph for future use.",
      "External ML tools and platforms can also be used in conjunction with knowledge graphs for more advanced ML models."
    ]
  },
  {
    "summary": "This chapter discusses the concept of metadata knowledge graphs as a way to track enterprise data assets, processes, and consumers. A metadata knowledge graph is an enterprise-wide map that records the shape and location of data, the systems that process that data, and its consumers. It helps with data governance, self-serve data consumption, and compliance and regulatory demands. The chapter explores the challenges of distributed data stewardship and how metadata knowledge graphs can address them. It also explains the components of a metadata knowledge graph, including datasets connected to data platforms, tasks and data pipelines, and data sinks. The chapter provides examples of metadata graph models and demonstrates how to query the metadata graph for data discovery, impact analysis, and data lineage. The chapter concludes by highlighting the benefits of using relationships to connect data and metadata in a knowledge graph.",
    "points": [
      "Metadata knowledge graphs are enterprise-wide maps that record the shape and location of data, the systems that process that data, and its consumers.",
      "Metadata knowledge graphs help with data governance, self-serve data consumption, and compliance and regulatory demands.",
      "Challenges of distributed data stewardship include duplicate or nearly duplicate data residing in silos and systems implemented without consideration of overall knowledge-organization needs.",
      "Components of a metadata knowledge graph include datasets connected to data platforms, tasks and data pipelines, and data sinks.",
      "Metadata graph models can be queried for data discovery, impact analysis, and data lineage.",
      "Using relationships, data and metadata can be connected in a knowledge graph to provide a globally linked view of data and enable various use cases.",
      "Metadata knowledge graphs serve as a foundation for higher-level use cases and can be used for semantic search."
    ]
  },
  {
    "summary": "This chapter discusses the importance of identity in business information systems and how knowledge graphs can help address the problem of identity. It covers scenarios where duplicated data may occur, such as data integration and anonymous activity. The chapter also provides a step-by-step guide on graph-based entity resolution, including data preparation, entity matching, and building/updating a persisted record of master entities. It explains the concept of blocking keys to reduce the search space and improve performance. The chapter also explores working with unstructured data and demonstrates how graph algorithms can be used to match entities based on weak identifiers. A case study on the Meredith Corporation Identity Graph is presented to illustrate the practical application of these concepts.",
    "points": [
      "Identity is crucial in business information systems and can be addressed using knowledge graphs",
      "Data integration and anonymous activity are common scenarios where duplicated data may occur",
      "Graph-based entity resolution involves data preparation, entity matching, and building/updating a persisted record of master entities",
      "Blocking keys can be used to reduce the search space and improve performance",
      "Graph algorithms can be used to match entities based on weak identifiers",
      "A case study on the Meredith Corporation Identity Graph demonstrates the practical application of these concepts"
    ]
  },
  {
    "summary": "This chapter focuses on finding patterns in knowledge graphs and using those patterns to improve future outcomes. It explores the use of knowledge graphs for fraud detection and skills matching. For fraud detection, knowledge graphs can be used to identify patterns of fraudulent activity and detect fraud rings. By analyzing patterns in the knowledge graph, organizations can identify potential fraudsters and take appropriate action. For skills matching, knowledge graphs can be used to match employees with the right skills to specific projects or teams. By analyzing the skills and project history of employees, organizations can build effective teams and ensure that employees are working on projects that align with their skills and expertise. The chapter also discusses the use of knowledge graphs for predicting organizational performance and making recommendations for career growth.",
    "points": [
      "Knowledge graphs can be used for fraud detection by identifying patterns of fraudulent activity and detecting fraud rings",
      "Knowledge graphs can be used for skills matching by matching employees with the right skills to specific projects or teams",
      "Knowledge graphs can be used for predicting organizational performance and making recommendations for career growth"
    ]
  },
  {
    "summary": "This chapter discusses the concept of dependency modeling and how it can be represented and processed using dependency-centric knowledge graphs. The chapter covers various scenarios where dependency modeling is useful, such as project planning, vulnerability assessment, and ownership chain analysis. It also explains how dependencies can be represented as a graph and how graph pattern matching and algorithms can be used to resolve dependency problems. The chapter provides examples of tabular representation of dependencies and demonstrates how to convert them into a knowledge graph using Cypher. It also explores advanced topics such as qualified dependencies, multidependencies, and impact propagation. The chapter concludes with discussions on validating a dependency knowledge graph and performing complex dependency processing, including single-point-of-failure analysis and root cause analysis.",
    "points": [
      "Dependency modeling is a common and important capability in various scenarios",
      "Dependencies can be represented as a graph and processed using graph pattern matching and algorithms",
      "Tabular representation of dependencies can be converted into a knowledge graph using Cypher",
      "Advanced topics include qualified dependencies, multidependencies, and impact propagation",
      "Dependency knowledge graphs can be validated and used for complex dependency processing such as single-point-of-failure analysis and root cause analysis"
    ]
  },
  {
    "summary": "This chapter discusses semantic search and similarity in the context of building knowledge graphs from unstructured data. It explains how natural language processing (NLP) techniques can be used to extract structured information from natural language documents and how these structures fit naturally into a graph structure. The chapter also explores how search engines have evolved over time, from basic keyword-based search to more sophisticated search using knowledge graphs. It highlights the importance of entity extraction and disambiguation in creating a semantic knowledge graph and demonstrates how to link entities to an organizing principle using NLP APIs and public ontologies. The chapter concludes with a case study on NASA's lessons learned knowledge graph.",
    "points": [
      "Natural language documents require preprocessing to extract structured information for automated use.",
      "Search engines have evolved from basic keyword-based search to more sophisticated search using knowledge graphs.",
      "Entity extraction and disambiguation are important in creating a semantic knowledge graph.",
      "NLP APIs and public ontologies can be used to link entities to an organizing principle.",
      "A case study on NASA's lessons learned knowledge graph demonstrates the benefits of semantic search."
    ]
  },
  {
    "summary": "This chapter explores the potential future directions for knowledge graphs, specifically the concept of knowledge lakes. Knowledge graphs have proliferated in recent years, with deployments ranging from individual use cases to cross-functional business activities. As the scope of knowledge graphs grows, the infrastructure to support them moves further down the enterprise stack. Knowledge lakes are a general-purpose approach that subsumes multiple knowledge graphs and nongraph data. They sit alongside data warehouses and data lakes, storing a curated subset of an organization's data represented as a graph. A knowledge lake brings meaning to the data in the lake or warehouse, making it valuable to the business. It is a collection of knowledge graphs designed for reuse. Despite their scope, knowledge lakes can start small and grow over time. The end goal is to provide contextualized understanding and linkage across the enterprise. Knowledge graphs and knowledge lakes offer significant opportunities to understand data in context and create systems of immense business value.",
    "points": [
      "Data is one of a modern enterprise\u2019s most valuable assets",
      "Knowledge graphs have proliferated in recent years",
      "Knowledge lakes are a general-purpose approach that subsumes multiple knowledge graphs and nongraph data",
      "Knowledge lakes sit alongside data warehouses and data lakes",
      "A knowledge lake brings meaning to the data in the lake or warehouse",
      "Knowledge lakes can start small and grow over time",
      "The end goal is to provide contextualized understanding and linkage across the enterprise",
      "Knowledge graphs and knowledge lakes offer significant opportunities to understand data in context and create systems of immense business value"
    ]
  },
  {
    "summary": "This text provides an overview of the content covered in the book 'Building Knowledge Graphs'. It covers various topics related to knowledge graphs, including graph databases, graph theory, graph algorithms, graph data science, semantic search, entity resolution, fraud detection, and more. The text also mentions the use of Neo4j, a popular graph database, and its features such as Cypher query language, APOC library, and Neo4j Graph Data Science. It highlights the importance of knowledge graphs in organizing and enriching data, as well as their applications in various industries such as banking, technology, media, and space exploration. The text also discusses the use of natural language processing and machine learning techniques in working with knowledge graphs. Overall, the text provides a comprehensive overview of knowledge graphs and their practical applications.",
    "points": [
      "The text covers various topics related to knowledge graphs, including graph databases, graph theory, graph algorithms, graph data science, semantic search, entity resolution, fraud detection, and more.",
      "Neo4j, a popular graph database, is mentioned along with its features such as Cypher query language, APOC library, and Neo4j Graph Data Science.",
      "The importance of knowledge graphs in organizing and enriching data is highlighted, along with their applications in various industries such as banking, technology, media, and space exploration.",
      "The use of natural language processing and machine learning techniques in working with knowledge graphs is discussed.",
      "The text provides a comprehensive overview of knowledge graphs and their practical applications."
    ]
  }
]